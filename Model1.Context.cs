//------------------------------------------------------------------------------
// <auto-generated>
//     Este código se generó a partir de una plantilla.
//
//     Los cambios manuales en este archivo pueden causar un comportamiento inesperado de la aplicación.
//     Los cambios manuales en este archivo se sobrescribirán si se regenera el código.
// </auto-generated>
//------------------------------------------------------------------------------

namespace RHQuercus
{
    using System;
    using System.Data.Entity;
    using System.Data.Entity.Infrastructure;
    using System.Data.Entity.Core.Objects;
    using System.Linq;
    
    public partial class RecursoHumanoQuercusEntities : DbContext
    {
        public RecursoHumanoQuercusEntities()
            : base("name=RecursoHumanoQuercusEntities")
        {
        }
    
        protected override void OnModelCreating(DbModelBuilder modelBuilder)
        {
            throw new UnintentionalCodeFirstException();
        }
    
        public virtual DbSet<Aguinaldo> Aguinaldo { get; set; }
        public virtual DbSet<Estado> Estado { get; set; }
        public virtual DbSet<EvaluacionDesem> EvaluacionDesem { get; set; }
        public virtual DbSet<Incapacidad> Incapacidad { get; set; }
        public virtual DbSet<Liquidacion> Liquidacion { get; set; }
        public virtual DbSet<MotivoLiq> MotivoLiq { get; set; }
        public virtual DbSet<Ocupacion> Ocupacion { get; set; }
        public virtual DbSet<PermisoLaboral> PermisoLaboral { get; set; }
        public virtual DbSet<Persona> Persona { get; set; }
        public virtual DbSet<Planilla> Planilla { get; set; }
        public virtual DbSet<RegistroMarca> RegistroMarca { get; set; }
        public virtual DbSet<sysdiagrams> sysdiagrams { get; set; }
        public virtual DbSet<TipoIncapacidad> TipoIncapacidad { get; set; }
        public virtual DbSet<TipoPermiso> TipoPermiso { get; set; }
        public virtual DbSet<TipoRol> TipoRol { get; set; }
        public virtual DbSet<Usuario> Usuario { get; set; }
        public virtual DbSet<Vacaciones> Vacaciones { get; set; }
    
        public virtual int sp_ActualizarVacaciones(Nullable<int> iDCedula, Nullable<double> cantVacas)
        {
            var iDCedulaParameter = iDCedula.HasValue ?
                new ObjectParameter("IDCedula", iDCedula) :
                new ObjectParameter("IDCedula", typeof(int));
    
            var cantVacasParameter = cantVacas.HasValue ?
                new ObjectParameter("CantVacas", cantVacas) :
                new ObjectParameter("CantVacas", typeof(double));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("sp_ActualizarVacaciones", iDCedulaParameter, cantVacasParameter);
        }
    }
}
